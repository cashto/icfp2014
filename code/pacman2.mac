!func main world, dummy
    ldc 0
    ldc 0
    cons
    ldf [step]
    cons
    ;loop:
    ;    !call dup
    ;    car
    ;    ldc 0
    ;    !call step
    ;    !call pop
    ;    ldc 0
    ;    tsel [loop] [loop]
    rtn
    
!func step state world
    ld 0 [state]
    cdr
!locals dir
    ;; for debug lulz
    ld 1 [world]
    cdr
    car
    ;cdr
    ;cdr
    ;cdr
    ;cdr
    dbug
    
    ld 1 [state]
    car
    ldc 4
    !call inc_wrap
    
    !call dup
    sel [if_not_zero] [if_zero]
    
    ld 0 [dir]
    cons
    ld 0 [dir]
    cons
    rtn
    
    if_zero:
        ld 0 [dir]
        ldc 4
        !call inc_wrap
        st 0 [dir]
    if_not_zero:
        join

!func dup val
    ld 0 [val]
    ld 0 [val]
    rtn

!func pop val
    rtn

!func inc_wrap i n
    ld 0 [i]
    ldc 1
    add
    !call dup
    ld 0 [n]
    ceq 
    tsel [if_true] [if_false]
    if_true:
        !call pop
        ldc 0
    if_false:
        rtn
    
    